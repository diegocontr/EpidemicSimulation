#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Wed Apr  7 00:50:16 2021@author: diego"""import numpy as npimport matplotlib.pyplot as pltimport numpy.random as nprmimport pandas as pdimport networkx as nximport shelve as slimport seaborn as snsimport scipy as spfrom copy import deepcopyimport osimport timeimport argparseimport EpiKit as epiimport dictfitimport covid_model as covid#%% functionsdef create_out_file(Params_list: list) -> str:     """     Using the dictionaries with parameters, it creates a name     for the output file of a simulation     :param Params_list: list of dictionaries with the parameter     :return: name of the output file as a string     """     Param = {}     for p in Params_list:        Param.update(p)     D ={'prot': Param['protocol'],         'Reff': Param['Reff'],         'g':Param['generation'],         'n': Param['Nruns'],         'E': Param['E(t=0)'],         'imm': Param['imm'],         't': Param['tmax'],         'wden':  Param['weekden'],         'ctest':  Param['type'],         }     if Param['rvax']>0:          D.update({'rvax':Param['rvax'],                    'vax':Param['vax'],} )     if 'Reg' in Param['protocol']:         D.update( {'ad':  Param['adhesion'],                    'W':  Param['W']} )     if 'STRS' in Param['protocol']:         D.update( {'ad':  Param['adhesion']}       )     if 'TW' in Param['protocol']:         D.update( {'Ntw':  Param['Ntw']} )     name = ''     for k,v in D.items():         name += '{}={}_'.format(k,v)     return  name[:-1]def set_condition(Model,ParamSim):    """    Function to prepare the initial condition of states for the nodes.    :param Model: AgentModel object with the simulation    :param ParamSim: dictionary with the parameters    :return:       An numpy array with the initial state for each node    """    # choose vaccinated    if ParamSim['rvax'] > 0:        Model.Nodes.biogroup = 0*Model.Nodes.ind_nodes        nodes = Model.Nodes.ind_nodes[  (Model.Nodes.state != 'E')]        Nvax = round(  ParamSim['Npop'] * ParamSim['rvax'] )        Model.Nodes.biogroup[ nprm.choice(nodes,   Nvax, replace=False) ] = np.zeros( Nvax ) + 1    ind_nodes = np.arange(Model.N)    # choose recovered    NR = round( ParamSim['imm'] * ParamSim['Npop'] )    nodes = np.array(['S' for i in range(Model.N)],dtype='<U4')    ages = Model.Nodes.biogroup    ind_R = nprm.choice(ind_nodes[nodes=='S'],  NR, replace=False )    nodes[ind_R] = 'R'    # choose seed    nodes_to_chose = ind_nodes[ (nodes=='S') & (ages==0) ]    prob = np.array([ Model.Nodes.sigma[i] for i in ages] )    prob = prob[nodes_to_chose]    prob = prob/prob.sum()    ind_E = nprm.choice( nodes_to_chose  )    nodes[ind_E] = 'E'    return nodesdef run(Model, Test, Param, ParamTest, ParamSim, folder, label='a', saving_level=2):    """    Function to run repeated simulations, and save it in a file.    :param Model: AgentModel to simulate.    :param Test: Test class to use on the simulation.    :param Param: dictionary with disease parameters.    :param ParamTest: dictionary with testing parameters.    :param ParamSim: dictionary with simulation parameter.    :param folder: folder where to save results.    :param label: extra identifier for the begining of the output file.    :param saving_level: how much detail to save in the output. Possible values are 0,1,2.    At the end    """    Params_list = [Param,ParamTest,ParamSim]    outfile = create_out_file( Params_list )    set_conditionP = lambda Model: set_condition(Model,ParamSim)    if not os.path.exists(folder + outfile + '.gzip'):        start_time = time.time()        Model_copy = deepcopy(Model)        Model_copy.set_test_protocol(Test)        res = [deepcopy(Model_copy.solve(set_condition=set_conditionP))                           for i in range(ParamSim['Nruns']) ]        runmins =  (time.time() - start_time)/60        print("--- {:.3} mins---".format( runmins ) )        ParamSim['run_mins'] = runmins        Params_list = [Param,ParamTest,ParamSim]                filename = folder +  label + '_' + outfile + '.gzip'        struct = epi.format_results_out(Model_copy, res, Params_list, level=saving_level)        epi.struct_to_json_file(filename, struct)        #%% parserparser = argparse.ArgumentParser(description='run school simulations.')# --- simulation parametersparser.add_argument('--Nruns', type=int, default=2,                    help='number of runs per condition')parser.add_argument('--tmax', type=float, default=60.0,                    help='final time simulations')parser.add_argument('--label', type=str, default='new_result_oldreact',                    help='add label to file')parser.add_argument('--folder', type=str, default='SimResults/',                    help='folder to save')parser.add_argument('--saving_level', type=int, default=2,                    help='how much detail to save (0 minimal, 1 medium, 2 high)')# --- data set parametersparser.add_argument('--data', type=str, default='office',                    choices=['office', 'hospital'],                    help='data set')parser.add_argument('--net', type=str, default='HET',                    help='network to use')parser.add_argument('--all_day', type=int, default=0,                    help='if activity runs all day')parser.add_argument('--weekdays', type=int, default=5,                    help='how long the week is')# --- preparation immune and vaccinated nodesparser.add_argument('--imm', type=float, default=0.0,                    help='intial percentage of immune population')parser.add_argument('--rvax', type=float, default=0.0,                    help='intial proportion of vaccinated')parser.add_argument('--vax', type=str, default='93p',                    help='intial proportion of vaccinated')# --- disease parametersparser.add_argument('--beta', type=float, default=0,                    help='effective rate of propagation')parser.add_argument('--Reff', type=float, default=3.0,                    help='reproductive number. Only used if beta==0')parser.add_argument('--generation', type=int, default=1,                    help='reproductive number measured in generation')parser.add_argument('--r_period', type=float, default=1.0,                    help='factor to modify the infectious period')parser.add_argument('--weekden', type=int, default=2,                    help='weekly introduction')# --- protocolsparser.add_argument('--protocol', type=str, default='Reg',                    help='set of test to run')parser.add_argument('--testtype', type=str, default='auto',                    choices = ['auto', 'PCR', 'antigen', 'perfect'],                    help='type of test used')parser.add_argument('-W', type=float, default=7,                    help='days between massive regular testing')parser.add_argument('--Ntw', type=int, default=5,                    help='how many groups to telework')parser.add_argument('--alpha', type=float, default=0.5,                    help='adhesion regular testing')args_read = parser.parse_args()print('SETUP >>', args_read)folder = args_read.folder +'/'LABEL = args_read.labelParamTest = {    "W": args_read.W,    "Ntw": args_read.Ntw,    "adhesion": 0.5,    "adhesion_decay": 1.0,    "Delta_R": 1,    "Delta_Q": 7.0 * args_read.r_period,    "type": args_read.testtype,    "p_detect": np.array([0.5, 0.5]),}ParamSim = {    "Reff": np.nan,    "generation": args_read.generation,    "tmax": args_read.tmax,    "protocol": "NoTest",    "imm": args_read.imm,    "E(t=0)": 1,    "Nruns": args_read.Nruns,    "vax": args_read.vax,    "rvax": args_read.rvax,    "vax_selection": int(args_read.rvax > 0),    "weekden": args_read.weekden,    "net": args_read.net,    "r_period": args_read.r_period,}#%% errorsif  args_read.net=='DYN' and args_read.all_day:    raise(ValueError,'DYN network used together with all_day on')#%% reading networksnetwork_folder = "Networks/" + args_read.data + "/"dataset_file_dict = {    "CMD": network_folder + "daily_CMD.json.gzip",    "CMB": network_folder + "daily_CMB.json.gzip",    "CMD1": network_folder + "daily_CMD.json.gzip",    "CMB1": network_folder + "daily_CMB.json.gzip",    "HET": network_folder + "daily_HET.json.gzip",    "HOM": network_folder + "daily_HOM.json.gzip",    "dHET": network_folder + "daily_dHET.json.gzip",    "DYN": network_folder + "temporal_DYN.json.gzip",    "dCM": network_folder + "matrix_dCM.json.gzip",    "CM": network_folder + "matrix_CM.json.gzip",    "FULL": network_folder + "matrix_FULL.json.gzip",}if args_read.net in dataset_file_dict:    Gt, contact_meta, _, net_type = epi.load_json_dataset(        dataset_file_dict[args_read.net]    )    TeachersDict = {}else:    raise (ValueError, "the network <{}> is not a valid option".format(args_read.net))dt_G = 900#%% assigning beta and infectiousnessif args_read.beta == 0:    beta = covid.beta_from_R0(        args_read.Reff,        args_read.data,        args_read.net,        args_read.r_period,        args_read.weekdays,        args_read.generation,    )else:    beta = args_read.beta# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!def create_graph_class(Dic, Ndays, all_day=False):    contructor_dic = {        4: epi.GraphDataSchool,        5: epi.GraphDataOffice,        7: epi.GraphDataAllDays,    }    if all_day:        Dic["sec0"] = 0        Dic["secf"] = 24 * 3600    return contructor_dic[Ndays](Dic)days_activity = args_read.weekdaysall_day = args_read.all_day# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!if args_read.data == "office":    if days_activity == 5:        net_cycle = max([round(len(Gt) * 7 / 5), 7])    elif days_activity == 7:        net_cycle = max([round(len(Gt)), 7])    gdic = {        "Gt": Gt,        "dt_sec": dt_G,        "sec0": int(8 * 3600),        "secf": int(12 * 3600),        "meta": contact_meta,        "TeachersDict": TeachersDict,        "net_cycle": net_cycle,        "type": net_type,    }# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!elif args_read.data == "hospital":    if days_activity == 7:        net_cycle = max([round(len(Gt)), 3])    gdic = {        "Gt": Gt,        "dt_sec": dt_G,        "sec0": int(5 * 3600),        "secf": int(19 * 3600),        "meta": contact_meta,        "TeachersDict": TeachersDict,        "net_cycle": net_cycle,        "type": net_type,    }Graphs = create_graph_class(gdic, days_activity, all_day)ParamGraph = {    "Npop": contact_meta.shape[0],    "Nteachers": len(TeachersDict),    "Nstudents": contact_meta.shape[0] - len(TeachersDict)    }ParamSim.update(ParamGraph)ParamTest.update(ParamGraph)#%%TestDict = {    "NoTest": epi.Test_None,    "ST": epi.Test_ST_office,    "Reg": epi.Test_Regular_office,    "TW": epi.Test_TW_office,    "TW2tw": epi.Test_TW_office_2tw,    "STRS": epi.Test_STRS_office,    "RegTW": epi.Test_RegTW_office,}#%% Create modelS = covid.SParam, React, S_inf = covid.get_covid_model(beta, ParamSim, args_read.data)Model = epi.AgentModel(    Graphs, Param, React, S, S_inf, N=ParamSim["Npop"], tmax=ParamSim["tmax"])if args_read.net in ["CMD", "CMB"]:    Model.Nodes.set_shuffle(True)elif args_read.net in ["CMD1", "CMB1"]:    Model.Nodes.set_shuffle(True)    Model.Nodes.Graphs.ndays = 1if ParamSim["vax_selection"]:    Model.vax_selection = Trueargs_read.set#%% main if __name__=='__main__':    start_time_all = time.time()    saving_level = args_read.saving_level        if args_read.protocol in TestDict.keys():        ParamSim['protocol'] = args_read.protocol        print('--->', ParamSim['protocol'])        Test = TestDict[ParamSim['protocol']](ParamTest)        run(Model,Test,Param,ParamTest,ParamSim,folder,LABEL,saving_level=saving_level)        else:        print ('NOTHING WAS EXECUTED!!! ')    #%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%        runmins =  (time.time() - start_time_all)/60    print("TOTAL: --- {:.3} mins---".format( runmins ) )    print("       --- {:.3} hours---".format( runmins/60 ) )